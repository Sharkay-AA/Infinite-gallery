{"version":3,"sources":["Components/InfiniteScroll/InfiniteScroll.js","App.js","index.js"],"names":["InfiniteScroll","useState","dataImg","setDataImg","pageIndex","setPageIndex","searchState","setSearchState","firstCall","setFirstCall","key","process","useEffect","fetch","then","response","json","data","imgsReceived","results","forEach","img","push","urls","regular","newFreshState","index","i","j","console","log","inpRef","useRef","window","addEventListener","infiniteCheck","removeEventListener","document","documentElement","scrollTop","scrollHeight","clientHeight","className","onSubmit","e","preventDefault","current","value","htmlFor","type","id","ref","map","src","alt","uuidv4","App","ReactDOM","render","getElementById"],"mappings":"oPAsIeA,MAlIf,WAEI,MAA8BC,mBAAS,CAAC,GAAI,GAAI,KAAhD,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAsCJ,mBAAS,UAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAkCN,oBAAS,GAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KAEMC,EAAMC,8CA2DZC,qBAAU,WACFJ,GA5BJK,MAAM,+CAAD,OAAgDT,EAAhD,8BAA+EE,EAA/E,sBAAwGI,IACxGI,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,IAAMC,EAAe,GACrBD,EAAKE,QAAQC,SAAQ,SAACC,GAClBH,EAAaI,KAAKD,EAAIE,KAAKC,YAU/B,IAPA,IAAMC,EAAgB,CAClB,GACA,GACA,IAGAC,EAAQ,EACHC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBH,EAAcE,GAAGL,KAAKJ,EAAaQ,IACnCA,IAGRvB,EAAWsB,QAOpB,CAACnB,IAEJM,qBAAU,WA7DNC,MAAM,+CAAD,OAAgDT,EAAhD,8BAA+EE,EAA/E,sBAAwGI,IACxGI,MAAK,SAACC,GACH,OAAOA,EAASC,UAEnBF,MAAK,SAACG,GACH,IAAMC,EAAe,GACrBD,EAAKE,QAAQC,SAAQ,SAACC,GAClBH,EAAaI,KAAKD,EAAIE,KAAKC,YAU/B,IAPA,IAAMC,EAAgB,CAAC,YACfvB,EAAQ,IADM,YAEdA,EAAQ,IAFM,YAGdA,EAAQ,KAGZwB,EAAQ,EACHC,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBH,EAAcE,GAAGL,KAAKJ,EAAaQ,IACnCA,IAGRvB,EAAWsB,GACXhB,GAAa,QAuCtB,CAACL,IAQJyB,QAAQC,IAAIxB,GAEZ,IAAMyB,EAASC,mBAEfpB,qBAAU,WAGN,OAFAqB,OAAOC,iBAAiB,SAAUC,GAE3B,WACHF,OAAOG,oBAAoB,SAAUD,MAE1C,IAEH,IAAMA,EAAgB,WAElB,MAAkDE,SAASC,gBAAnDC,EAAR,EAAQA,UAAR,EAAmBC,aAEAD,IAFnB,EAAiCE,cAG7BpC,GAAa,SAAAD,GAAS,OAAIA,EAAY,MAK9C,OACI,sBAAKsC,UAAU,YAAf,UACI,uBAAMC,SA9BO,SAACC,GAClBA,EAAEC,iBAEFtC,EAAewB,EAAOe,QAAQC,OAC9B1C,EAAa,IA0BT,UACI,uBAAO2C,QAAQ,SAAf,6BACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKpB,OAExC,sBAAKW,UAAU,YAAf,UACI,8BACKxC,EAAQ,GAAGkD,KAAI,SAAA/B,GACZ,OAAO,qBAAoBgC,IAAKhC,EAAKiC,IAAI,kBAAxBC,oBAGzB,8BACKrD,EAAQ,GAAGkD,KAAI,SAAA/B,GACZ,OAAO,qBAAoBgC,IAAKhC,EAAKiC,IAAI,kBAAxBC,oBAGzB,8BACKrD,EAAQ,GAAGkD,KAAI,SAAA/B,GACZ,OAAO,qBAAoBgC,IAAKhC,EAAKiC,IAAI,kBAAxBC,2BCrH1BC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCENC,IAASC,OACP,cAAC,EAAD,IACArB,SAASsB,eAAe,W","file":"static/js/main.adb0cf63.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport \"./InfiniteScroll.css\"\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction InfiniteScroll() {\r\n\r\n    const [dataImg, setDataImg] = useState([[], [], []]);\r\n    const [pageIndex, setPageIndex] = useState(1);\r\n    const [searchState, setSearchState] = useState(\"random\");\r\n    const [firstCall, setFirstCall] = useState(true);\r\n\r\n    const key = process.env.REACT_APP_API_KEY\r\n\r\n    const infiniteFetchData = () => {\r\n        fetch(`https://api.unsplash.com/search/photos?page=${pageIndex}&per_page=30&query=${searchState}&client_id=${key}`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                const imgsReceived = [];\r\n                data.results.forEach((img) => {\r\n                    imgsReceived.push(img.urls.regular)\r\n                })\r\n\r\n                const newFreshState = [\r\n                    [...dataImg[0]],\r\n                    [...dataImg[1]],\r\n                    [...dataImg[2]],\r\n                ]\r\n\r\n                let index = 0;\r\n                for (let i = 0; i < 3; i++) {\r\n                    for (let j = 0; j < 10; j++) {\r\n                        newFreshState[i].push(imgsReceived[index])\r\n                        index++\r\n                    }\r\n                }\r\n                setDataImg(newFreshState)\r\n                setFirstCall(false);\r\n            })\r\n    }\r\n\r\n    const searchFetchData = () => {\r\n        fetch(`https://api.unsplash.com/search/photos?page=${pageIndex}&per_page=30&query=${searchState}&client_id=${key}`)\r\n            .then((response) => {\r\n                return response.json()\r\n            })\r\n            .then((data) => {\r\n                const imgsReceived = [];\r\n                data.results.forEach((img) => {\r\n                    imgsReceived.push(img.urls.regular)\r\n                })\r\n\r\n                const newFreshState = [\r\n                    [],\r\n                    [],\r\n                    [],\r\n                ]\r\n\r\n                let index = 0;\r\n                for (let i = 0; i < 3; i++) {\r\n                    for (let j = 0; j < 10; j++) {\r\n                        newFreshState[i].push(imgsReceived[index])\r\n                        index++\r\n                    }\r\n                }\r\n                setDataImg(newFreshState)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (firstCall) return;\r\n        searchFetchData();\r\n    }, [searchState])\r\n\r\n    useEffect(() => {\r\n        infiniteFetchData();\r\n    }, [pageIndex])\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault()\r\n\r\n        setSearchState(inpRef.current.value)\r\n        setPageIndex(1)\r\n    }\r\n    console.log(searchState)\r\n\r\n    const inpRef = useRef();\r\n\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", infiniteCheck);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", infiniteCheck)\r\n        }\r\n    }, [])\r\n\r\n    const infiniteCheck = () => {\r\n\r\n        const { scrollTop, scrollHeight, clientHeight } = document.documentElement;\r\n\r\n        if (scrollHeight - scrollTop === clientHeight) {\r\n            setPageIndex(pageIndex => pageIndex + 1)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <form onSubmit={handleSearch}>\r\n                <label htmlFor=\"search\">Votre recherche</label>\r\n                <input type=\"text\" id='search' ref={inpRef} />\r\n            </form>\r\n            <div className=\"card-list\">\r\n                <div>\r\n                    {dataImg[0].map(img => {\r\n                        return <img key={uuidv4()} src={img} alt=\"image-unsplash\" />\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    {dataImg[1].map(img => {\r\n                        return <img key={uuidv4()} src={img} alt=\"image-unsplash\" />\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    {dataImg[2].map(img => {\r\n                        return <img key={uuidv4()} src={img} alt=\"image-unsplash\" />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InfiniteScroll;","import InfiniteScroll from \"./Components/InfiniteScroll/InfiniteScroll\";\nfunction App() {\n  return (\n    <div>\n      <InfiniteScroll />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}